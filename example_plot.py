# This is a script to return an example plot from example data generated by vtipy2.
# This script should provide inspiration for data extraction and potentially analysis.
# This script as is extracts data from the directory hierarchy storing the data,
# and then produces a Nyquist plot of the data. 
# This script uses the example_data experiment directory, in which you can see an example of an experiment directory.

import os, json
import numpy as np

import matplotlib.pyplot as plt
from matplotlib import style
style.use("ggplot")

fig, ax = plt.subplots(1, dpi = 100)
# CHANGE ME, to edit axes: [x_min, x_max, y_min, y_max]
ax.axis([0, 50, 0, 50])

# CHANGE ME to name of experiment of interest
experiment_name = "example_data"

# Open details file associated with experiment
try:
    with open("experiments\\{}\\details.json".format(experiment_name), "r") as jf:
        details = json.load(jf)
    print("\tDetails successfully loaded.")
except:
    raise Exception("Experiment details could not be found/opened.")

for ramp in details["ramps"]:
    ramp_dir = "experiments\\{}\\{}_{}\\".format(experiment_name, ramp["num"], "up" if ramp["up"] else "down")
    for temp in ramp["temps"]:
        temp_dir = ramp_dir + "{}C".format(temp)
        
        # Lists to store real and imaginary components of impedances, for all of the sweeps at this temperature
        res = []
        ims = []
        
        # Get data from each sweep file. Converts magnitude and argument to real and imaginary components.
        for sweep_file in os.listdir(temp_dir):
            data = np.genfromtxt(temp_dir + "\\" + sweep_file, skip_header = 2, delimiter = ",")
            res.append([data[:,1]*np.cos(data[:,2]*np.pi*2./360.)])
            ims.append([data[:,1]*np.sin(data[:,2]*np.pi*2./360.)])
        
        # Take averages over sweeps
        re = np.mean(res, axis = 0)[0]
        im = np.mean(ims, axis = 0)[0]
        
        # Change to kiloohms
        re = re / 1000
        im = im / 1000
        
        # Plot averaged data, with labels
        ax.plot(re, -im, "o", label = ("{} Â°C".format(temp)))
        ax.set_xlabel("Re[Z] / k\u03A9")
        ax.set_ylabel("-Im[Z] / k\u03A9")
        
print("\tPlot showing.")
print("\t(To save plot, use save button in pop-up window)")

plt.legend()
plt.show()
